'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Short ID Generation in JavaScript
// http://fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/

/**
 * The default alphabet is 25 numbers and lowercase letters.
 * Any numbers that look like letters and vice versa are removed:
 * 1 l, 0 o.
 * Also the following letters are not present, to prevent any
 * expletives: cfhistu
 */
var DEFAULT_ALPHABET = '23456789abdegjkmnpqrvwxyz';

// Governs the length of the ID.
// With an alphabet of 25 chars,
// a length of 8 gives us 25^8 or
// 152,587,890,625 possibilities.
// Should be enough...
var DEFAULT_ID_LENGTH = 5;

/**
 * Governs the number of times we should try to find
 * a unique value before giving up.
 * @type {Number}
 */
var UNIQUE_RETRIES = 9999;

/**
 * Returns a randomly-generated friendly ID.
 * Note that the friendly ID is not guaranteed to be
 * unique to any other ID generated by this same method,
 * so it is up to you to check for uniqueness.
 * @return {String} friendly ID.
 */
var generate = exports.generate = function generate(options) {
    var _options = _extends({}, options),
        _options$alphabet = _options.alphabet,
        alphabet = _options$alphabet === undefined ? DEFAULT_ALPHABET : _options$alphabet,
        _options$idLength = _options.idLength,
        idLength = _options$idLength === undefined ? DEFAULT_ID_LENGTH : _options$idLength;

    var rtn = '';
    for (var i = 0; i < idLength; i++) {
        rtn += alphabet.charAt(Math.floor(Math.random() * alphabet.length));
    }
    return rtn;
};

/**
 * Tries to generate a unique ID that is not defined in the
 * `previous` array.
 * @param  {Array} previous The list of previous ids to avoid.
 * @return {String} A unique ID, or `null` if one could not be generated.
 */
var generateUnique = exports.generateUnique = function generateUnique(previous) {
    previous = previous || [];
    var retries = 0;
    var id = void 0;

    // Try to generate a unique ID,
    // i.e. one that isn't in the previous.
    while (!id && retries < UNIQUE_RETRIES) {
        id = generate();
        if (previous.indexOf(id) !== -1) {
            id = null;
            retries++;
        }
    }

    return id;
};